version: '3.8'

services:
  # Redis 캐시 서버
  redis:
    image: redis:7-alpine
    container_name: criti-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 백엔드 API 서버
  backend:
    build: 
      context: ../../backend
      dockerfile: Dockerfile
    container_name: criti-ai-backend
    env_file:
      - ../../backend/.env
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:./criti-ai.db
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - FRONTEND_URL=http://localhost:5173
    volumes:
      - ../../backend/criti-ai.db:/app/criti-ai.db
      - backend_uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 프론트엔드 (개발용 - 프로덕션에서는 Nginx 사용 권장)
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: criti-ai-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_BACKEND_URL=http://localhost:3001
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  default:
    name: criti-ai-network
