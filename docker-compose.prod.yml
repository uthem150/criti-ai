version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: criti-ai-postgres
    environment:
      POSTGRES_DB: criti_ai
      POSTGRES_USER: criti_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U criti_user -d criti_ai"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: criti-ai-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 백엔드 API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    container_name: criti-ai-backend
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://criti_user:${POSTGRES_PASSWORD}@postgres:5432/criti_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: criti-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: criti-ai-network
