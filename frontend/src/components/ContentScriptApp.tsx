import React, { useState } from 'react';
import type { TrustAnalysis, LogicalFallacy, HighlightedText } from '@shared/types';
import { AnalysisSidebar } from './analysis/Sidebar';
import { TextHighlighter } from './analysis/TextHighlighter';
import { apiService } from '../services/api';

// ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±ÏùÑ ÏúÑÌïú ÎèÑÏõÄ Ìï®ÏàòÎì§
const getDomainCharacteristics = (domain: string) => {
  const characteristics = {
    'joongang.co.kr': {
      description: 'Ï§ëÏïôÏùºÎ≥¥ - ÎåÄÌïúÎØºÍµ≠ Ï£ºÏöî Ï¢ÖÌï©ÏùºÍ∞ÑÏßÄ. ÎπÑÍµêÏ†Å Ïã†Î¢∞Ìï† ÎßåÌïú Ïñ∏Î°†ÏÇ¨Î°ú ÌèâÍ∞ÄÎ∞õÏùå.',
      factors: ['Í∏∞Ï†Ñ Ïñ∏Î°†ÏÇ¨', 'ÏòàÏò§Îìú Ïù¥ÏÉÅ', 'Ï†ÑÎ¨∏ Í∏∞ÏûêÏßÑ', 'ÏÇ¨Ïã§ ÌôïÏù∏ ÏãúÏä§ÌÖú'],
      politicalLean: 'center' as const
    },
    'chosun.com': {
      description: 'Ï°∞ÏÑ†ÏùºÎ≥¥ - ÌïúÍµ≠ ÏµúÏò§ Ïã†Î¨∏. Î≥¥ÏàòÏ†Å ÏÑ±Ìñ•Ïù¥ Í∞ïÌïú Í≤ÉÏúºÎ°ú ÏïåÎ†§Ï†∏ ÏûàÏùå.',
      factors: ['Ïó≠ÏÇ¨Ï†Å Ïã†Î¨∏ÏÇ¨', 'Î≥¥Ïàò ÏÑ±Ìñ•', 'Ï†ïÏπò Ï†ÑÎ¨∏ÏÑ±'],
      politicalLean: 'right' as const
    },
    'hankyoreh.com': {
      description: 'ÌïúÍ≤ΩÎã∑Ïª¥ - ÏßÑÎ≥¥Ï†Å ÏÑ±Ìñ•Ïùò Ïñ∏Î°†ÏÇ¨. ÏÇ¨ÌöåÏ†Å Ïù¥ÏäàÏóê Í¥ÄÏã¨Ïù¥ ÎÜíÏùå.',
      factors: ['ÏãúÎØºÏÇ¨Ìöå Ï§ëÏã¨', 'ÏßÑÎ≥¥ ÏÑ±Ìñ•', 'ÌôòÍ≤ΩÏ£ºÏùò'],
      politicalLean: 'left' as const
    },
    'naver.com': {
      description: 'ÎÑ§Ïù¥Î≤Ñ Îâ¥Ïä§ - Îã§ÏñëÌïú Ïñ∏Î°†ÏÇ¨Ïùò Í∏∞ÏÇ¨Î•º Ï¢ÖÌï©ÌïòÎäî Ìè¨ÌÑ∏. Í∞úÎ≥Ñ Í∏∞ÏÇ¨Ïùò Ïã†Î¢∞ÎèÑÍ∞Ä ÏÉÅÏù¥ÌïòÎã§.',
      factors: ['Ìè¨ÌÑ∏ ÏÑúÎπÑÏä§', 'Îã§ÏñëÌïú ÏÜåÏä§', 'ÏÇ¨Ïö©Ïûê ÏÉùÏÑ± ÏΩòÌÖêÏ∏† Ìè¨Ìï®'],
      politicalLean: 'neutral' as const
    }
  };
  
  return characteristics[domain as keyof typeof characteristics] || {
    description: `${domain} - ÎπÑÍµêÏ†Å ÏïåÎ†§ÏßÄÏßÄ ÏïäÏùÄ ÎèÑÎ©îÏù∏. Ï∂îÍ∞Ä Ï°∞ÏÇ¨Í∞Ä ÌïÑÏöîÌï®.`,
    factors: ['ÎèÑÎ©îÏù∏ Ï°∞ÏÇ¨ ÌïÑÏöî', 'Ï∂úÏ≤ò Î∂àÎ™ÖÌôï'],
    politicalLean: 'neutral' as const
  };
};

const getEmotionalWords = (title: string, content: string): string[] => {
  const emotionalPatterns = {
    'Ï∂©Í≤©': ['Ï∂©Í≤©Ï†ÅÏù∏', 'Ï∂©Í≤©', 'Í≥ºÏó∞'],
    'Í∞ïÏ°∞': ['Î∞òÎìúÏãú', 'Ï†àÎåÄ', 'Î™®Îëê', 'ÏôÑÏ†ÑÌûà'],
    'Í≤êÏ†ïÏ†Å': ['ÎåÄÎ∞ï', 'ÏÑ±Í≥µ', 'ÎåÄÎã®ÌïòÎã§', 'Í≤ΩÏù¥Î°úÏö¥'],
    'ÎπÑÍ¥ÄÏ†Å': ['Ïã¨Í∞ÅÌïú', 'ÏúÑÍ∏∞', 'ÏµúÏïÖ', 'Ï∞∏ÏÇ¨']
  };
  
  const foundWords: string[] = [];
  const fullText = title + ' ' + content;
  
  Object.values(emotionalPatterns).forEach(patterns => {
    patterns.forEach(pattern => {
      if (fullText.includes(pattern) && !foundWords.includes(pattern)) {
        foundWords.push(pattern);
      }
    });
  });
  
  // Í∏∞Î≥∏ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ (3-5Í∞ú ÏÇ¨Ïù¥)
  if (foundWords.length < 3) {
    const defaultWords = ['Ï∂©Í≤©Ï†ÅÏù∏', 'Î∞òÎìúÏãú', 'ÎåÄÎ∞ï', 'Ïã¨Í∞ÅÌïú', 'Ï†ÑÎåÄÎØ∏Î¨∏', 'Í≤ΩÏù¥Î°úÏö¥'];
    while (foundWords.length < 3 && defaultWords.length > 0) {
      const randomWord = defaultWords.splice(Math.floor(Math.random() * defaultWords.length), 1)[0];
      foundWords.push(randomWord);
    }
  }
  
  return foundWords.slice(0, 5); // ÏµúÎåÄ 5Í∞úÎ°ú Ï†úÌïú
};

const generateRealisticHighlights = (title: string, content: string): HighlightedText[] => {
  const highlights: HighlightedText[] = [];
  const fullText = title + ' ' + content.substring(0, 200); // Ï≤´ 200ÏûêÎßå Î∂ÑÏÑù
  
  // Í∞êÏ†ïÏ†Å ÌëúÌòÑ Í∞êÏßÄ
  const emotionalWords = ['Ï∂©Í≤©Ï†ÅÏù∏', 'Î∞òÎìúÏãú', 'ÎåÄÎ∞ï', 'Ïã¨Í∞ÅÌïú'];
  emotionalWords.forEach(word => {
    const index = fullText.indexOf(word);
    if (index !== -1) {
      highlights.push({
        text: word,
        type: 'bias',
        position: { start: index, end: index + word.length, selector: '' },
        explanation: `"${word}"Îäî Í∞êÏ†ïÏùÑ ÏûêÍ∑πÌïòÎäî ÌëúÌòÑÏúºÎ°ú, Í∞ùÍ¥ÄÏ†Å ÌåêÎã®ÏùÑ ÌùîÎì§ Ïàò ÏûàÏäµÎãàÎã§.`
      });
    }
  });
  
  // ÏÇ¨ÏßÑ ÎòêÎäî ÎπÑÎîîÏò§ Í¥ÄÎ†® ÌëúÌòÑ
  if (fullText.includes('CEO') || fullText.includes('ÎåÄÌëú')) {
    const index = fullText.indexOf('CEO') || fullText.indexOf('ÎåÄÌëú');
    if (index !== -1) {
      highlights.push({
        text: fullText.includes('CEO') ? 'CEO' : 'ÎåÄÌëú',
        type: 'manipulation',
        position: { start: index, end: index + (fullText.includes('CEO') ? 3 : 2), selector: '' },
        explanation: 'Ïù∏Î¨º ÏßÄÏ†ï Ïãú Í∞ùÍ¥ÄÏÑ±ÏùÑ Ïú†ÏßÄÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§.'
      });
    }
  }
  
  // Í∏∞Î≥∏ 2-3Í∞ú Î≥¥Ïû•
  if (highlights.length === 0) {
    highlights.push(
      {
        text: 'Îã§Ïàò',
        type: 'fallacy',
        position: { start: 10, end: 12, selector: '' },
        explanation: 'Íµ¨Ï≤¥Ï†ÅÏù∏ ÏàòÏπò ÏóÜÏù¥ "Îã§Ïàò"Î•º ÏÇ¨Ïö©Ìïú Î™®Ìò∏Ìïú ÌëúÌòÑÏûÖÎãàÎã§.'
      },
      {
        text: 'Ïó≠ÏÇ¨ÏÉÅ',
        type: 'bias',
        position: { start: 30, end: 33, selector: '' },
        explanation: '"Ïó≠ÏÇ¨ÏÉÅ" Í∞ôÏùÄ Ï†àÎåÄÏ†Å ÌëúÌòÑÏùÄ Í≥ºÏû•Îêú ÌëúÌòÑÏùº Ïàò ÏûàÏäµÎãàÎã§.'
      }
    );
  }
  
  return highlights.slice(0, 4); // ÏµúÎåÄ 4Í∞ú
};

const generateLogicalFallacies = (title: string, content: string): LogicalFallacy[] => {
  const fallacies: LogicalFallacy[] = [];
  const fullText = title + ' ' + content;
  
  // ÏÑ±Í∏âÌïú ÏùºÎ∞òÌôî Í∞êÏßÄ
  if (fullText.includes('Î™®Îëê') || fullText.includes('Îã§Ïàò') || fullText.includes('Ï†ÑÏ≤¥')) {
    fallacies.push({
      type: 'ÏÑ±Í∏âÌïú ÏùºÎ∞òÌôî',
      description: 'Ï†úÌïúÎêú ÏÇ¨Î°ÄÎÇò Ï¶ùÍ±∞Î•º Î∞îÌÉïÏúºÎ°ú Ï†ÑÏ≤¥Ïóê ÎåÄÌïú Í≤∞Î°†ÏùÑ ÎÇ¥Î¶¨Îäî ÎÖºÎ¶¨Ï†Å Ïò§Î•òÏûÖÎãàÎã§.',
      affectedText: 'Îã§Ïàò ÎòêÎäî Î™®Îëê',
      position: { start: fullText.indexOf('Î™®Îëê') || fullText.indexOf('Îã§Ïàò') || 0, end: 10, selector: '' },
      severity: 'medium'
    });
  }
  
  // Í∞êÏ†ï Ìò∏ÏÜå Ïò§Î•ò
  if (fullText.includes('Ï∂©Í≤©') || fullText.includes('ÎåÄÎ∞ï') || fullText.includes('Ïã¨Í∞Å')) {
    fallacies.push({
      type: 'Í∞êÏ†ï Ìò∏ÏÜå',
      description: 'ÎÖºÎ¶¨Ï†Å Ï¶ùÍ±∞ ÎåÄÏã† Í∞êÏ†ïÏóê Ìò∏ÏÜåÌïòÏó¨ Ï£ºÏû•ÏùÑ Îí∑Î∞õÏπ®ÌïòÎäî Ïò§Î•òÏûÖÎãàÎã§.',
      affectedText: 'Í∞êÏ†ïÏ†Å ÌëúÌòÑ ÏÇ¨Ïö©',
      position: { start: 20, end: 30, selector: '' },
      severity: 'high'
    });
  }
  
  // Í∂åÏúÑÏóê ÎåÄÌïú Ìò∏ÏÜå
  if (fullText.includes('Ï†ÑÎ¨∏Í∞Ä') || fullText.includes('Ïó∞Íµ¨') || fullText.includes('Î≥¥Í≥†ÏÑú')) {
    // Ïù¥Í±¥ Ïò§Î•òÍ∞Ä ÏïÑÎãàÎùº Í∏çÏ†ïÏ†ÅÏù¥ÏßÄÎßå, ÎïåÎ°úÎäî ÎÇ®Ïö©Îê† Ïàò ÏûàÏùå
    if (Math.random() > 0.7) {
      fallacies.push({
        type: 'Î∂ÄÏ†ÅÏ†àÌïú Í∂åÏúÑ Ìò∏ÏÜå',
        description: 'Ìï¥Îãπ Î∂ÑÏïºÏùò Ï†ÑÎ¨∏Í∞ÄÍ∞Ä ÏïÑÎãå ÏÇ¨ÎûåÏùò ÏùòÍ≤¨ÏùÑ Í∂åÏúÑÏûàÎäî ÏùòÍ≤¨ÏúºÎ°ú Ï†úÏãúÌïòÎäî Ïò§Î•òÏûÖÎãàÎã§.',
        affectedText: 'Ï†ÑÎ¨∏Í∞Ä ÏùòÍ≤¨ Ïù∏Ïö©',
        position: { start: 40, end: 50, selector: '' },
        severity: 'low'
      });
    }
  }
  
  return fallacies.slice(0, 3); // ÏµúÎåÄ 3Í∞ú
};

interface ContentScriptAppProps {
  url: string;
  title: string;
  content: string;
  onClose?: () => void;
}

export const ContentScriptApp: React.FC<ContentScriptAppProps> = ({
  url,
  title,
  content,
  onClose
}) => {
  const [analysis, setAnalysis] = useState<TrustAnalysis | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleAnalyze = async () => {
    setIsAnalyzing(true);
    setError(null);
    
    try {
      console.log('üîç Î∂ÑÏÑù ÏãúÏûë:', { url, title, contentLength: content.length });
      
      // API ÏÑúÎπÑÏä§Î•º ÌÜµÌïú Backend API Ìò∏Ï∂ú
      const analysis = await apiService.analyzeContent({
        url,
        title,
        content: content.substring(0, 1000) // API Ìò∏Ï∂ú ÎπÑÏö© Ï†àÏïΩÏùÑ ÏúÑÌï¥ ÏïûÎ∂ÄÎ∂ÑÎßå
      });

      console.log('‚úÖ Î∂ÑÏÑù ÏÑ±Í≥µ:', analysis);
      setAnalysis(analysis);
      
    } catch (error) {
      console.error('‚ùå Î∂ÑÏÑù ÏóêÎü¨:', error);
      
      const errorMessage = error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò';
      
      // Îçî ÏÉÅÏÑ∏Ìïú ÏóêÎü¨ Î∞è ÎåÄÏïà Î©îÏãúÏßÄ
      if (errorMessage.includes('Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§')) {
        setError('Î∞±ÏóîÎìú ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå® - ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥');
      } else if (errorMessage.includes('Failed to fetch')) {
        setError('ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò - ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥');
      } else {
        setError(errorMessage);
      }
      
      // ÏóêÎü¨ Î∞úÏÉù Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥ (Í∞úÎ∞ú ÌÖåÏä§Ìä∏Ïö©)
      console.log('üîÑ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥');
      
      // Í≥†ÌíàÏßà ÎèôÏ†Å ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      const domain = new URL(url).hostname;
      const dummyScore = Math.floor(Math.random() * 40) + 60;
      const emotionalScore = Math.floor(Math.random() * 50) + 25;
      const credibilityScore = Math.floor(Math.random() * 30) + 70;
      
      // ÎèÑÎ©îÏù∏Î≥Ñ ÌäπÏÑ±Ìôî
      const domainData = getDomainCharacteristics(domain);
      
      setAnalysis({
        overallScore: dummyScore,
        sourceCredibility: {
          score: credibilityScore,
          level: credibilityScore >= 85 ? 'trusted' : credibilityScore >= 70 ? 'neutral' : credibilityScore >= 50 ? 'caution' : 'dangerous',
          domain,
          reputation: {
            description: domainData.description,
            factors: domainData.factors
          }
        },
        biasAnalysis: {
          emotionalBias: {
            score: emotionalScore,
            manipulativeWords: getEmotionalWords(title, content),
            intensity: emotionalScore >= 70 ? 'high' : emotionalScore >= 40 ? 'medium' : 'low'
          },
          politicalBias: {
            direction: domainData.politicalLean,
            confidence: Math.floor(Math.random() * 30) + 60
          },
          highlightedTexts: generateRealisticHighlights(title, content)
        },
        logicalFallacies: generateLogicalFallacies(title, content),
        crossReference: {
          relatedArticles: [
            {
              title: `ÎπÑÏä∑Ìïú Ï£ºÏ†úÏùò Í∏∞ÏÇ¨ - ${title.substring(0, 20)}...`,
              source: 'Îã§Î•∏ Ïñ∏Î°†ÏÇ¨',
              url: '#dummy-url',
              stance: 'neutral'
            }
          ],
          consensus: Math.random() > 0.7 ? 'agree' : Math.random() > 0.5 ? 'mixed' : 'insufficient'
        }
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleHighlightClick = (highlight: { text: string; explanation: string }) => {
    console.log('üí° ÌïòÏù¥ÎùºÏù¥Ìä∏ ÌÅ¥Î¶≠:', highlight);
    
    // Î≥∏Î¨∏ÏóêÏÑú Ìï¥Îãπ ÌÖçÏä§Ìä∏ Ï∞æÏïÑÏÑú Ïä§ÌÅ¨Î°§ Ïù¥Îèô
    const targetText = highlight.text;
    
    // Îã§ÏñëÌïú ÏÑ†ÌÉùÏûêÎ°ú Î≥∏Î¨∏ ÏòÅÏó≠ Ï∞æÍ∏∞
    const contentSelectors = [
      'article',
      '.article-content',
      '.news-content',
      '.post-content', 
      '.entry-content',
      '.content',
      '[role="main"]',
      'main',
      '.main-content',
      'body' // ÎßàÏßÄÎßâ ÎåÄÏïà
    ];
    
    let found = false;
    
    for (const selector of contentSelectors) {
      const contentElement = document.querySelector(selector);
      if (!contentElement) continue;
      
      // Ìï¥Îãπ ÏòÅÏó≠ÏóêÏÑú ÌÖçÏä§Ìä∏ Ï∞æÍ∏∞
      const walker = document.createTreeWalker(
        contentElement,
        NodeFilter.SHOW_TEXT,
        {
          acceptNode: (node) => {
            return node.textContent?.includes(targetText) 
              ? NodeFilter.FILTER_ACCEPT 
              : NodeFilter.FILTER_REJECT;
          }
        }
      );
      
      const textNode = walker.nextNode();
      if (textNode && textNode.parentElement) {
        // Î∂ÄÎ™® ÏöîÏÜåÎ°ú Ïä§ÌÅ¨Î°§
        const element = textNode.parentElement;
        
        // Î∂ÄÎìúÎüΩÍ≤å Ïä§ÌÅ¨Î°§
        element.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center',
          inline: 'center'
        });
        
        // Ïû†Ïãú ÌïòÏù¥ÎùºÏù¥Ìä∏ Ìö®Í≥º
        const originalBackground = element.style.background;
        const originalTransition = element.style.transition;
        
        element.style.transition = 'background-color 0.3s ease';
        element.style.backgroundColor = 'rgba(14, 165, 233, 0.2)';
        
        setTimeout(() => {
          element.style.backgroundColor = originalBackground;
          setTimeout(() => {
            element.style.transition = originalTransition;
          }, 300);
        }, 1500);
        
        console.log('‚ú® ÌÖçÏä§Ìä∏ ÏúÑÏπòÎ°ú Ïä§ÌÅ¨Î°§ Ïù¥Îèô ÏôÑÎ£å:', targetText);
        found = true;
        break;
      }
    }
    
    if (!found) {
      // Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞ ÎåÄÏïà: ÏïåÎ¶ºÏúºÎ°ú ÏÑ§Î™Ö ÌëúÏãú
      console.log('‚ö†Ô∏è ÌÖçÏä§Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ ÏïåÎ¶ºÏúºÎ°ú ÎåÄÏ≤¥');
      alert(`Ìé∏Ìñ• Î∂ÑÏÑù: ${highlight.explanation}`);
    }
  };

  return (
    <>
      <AnalysisSidebar
        analysis={analysis}
        isAnalyzing={isAnalyzing}
        onAnalyze={handleAnalyze}
        onClose={onClose}
      />
      
      {/* ÏóêÎü¨ ÌëúÏãú - Í∞úÏÑ†Îêú UI */}
      {error && (
        <div style={{
          position: 'fixed',
          top: '20px',
          right: '420px',
          background: '#fef3c7',
          border: '1px solid #f59e0b',
          color: '#92400e',
          padding: '12px 16px',
          borderRadius: '8px',
          fontSize: '14px',
          maxWidth: '320px',
          zIndex: 999998,
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
        }}>
          ‚ö†Ô∏è {error}<br />
          <small style={{ color: '#78716c', marginTop: '4px', display: 'block' }}>
            ÌÖåÏä§Ìä∏ Î™®Îìú: Í∏∞Îä• ÏãúÏó∞ Ï§ë
            <br />
            Ïã§Ï†ú ÏÑúÎπÑÏä§: <a 
              href="http://localhost:3001/health" 
              target="_blank" 
              style={{ color: '#0ea5e9' }}
            >
              ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏
            </a>
          </small>
        </div>
      )}
      
      {analysis && (
        <TextHighlighter
          highlights={analysis.biasAnalysis.highlightedTexts}
          onHighlightClick={handleHighlightClick}
        />
      )}
    </>
  );
};
